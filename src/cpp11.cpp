// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// minkowski.cpp
SEXP polygon_minkowski_offset(SEXP polygons, SEXP offset, cpp11::integers n, double eps);
extern "C" SEXP _boundaries_polygon_minkowski_offset(SEXP polygons, SEXP offset, SEXP n, SEXP eps) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_minkowski_offset(cpp11::as_cpp<cpp11::decay_t<SEXP>>(polygons), cpp11::as_cpp<cpp11::decay_t<SEXP>>(offset), cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(n), cpp11::as_cpp<cpp11::decay_t<double>>(eps)));
  END_CPP11
}
// minkowski.cpp
SEXP polygon_minkowski_sum(SEXP p, SEXP q);
extern "C" SEXP _boundaries_polygon_minkowski_sum(SEXP p, SEXP q) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_minkowski_sum(cpp11::as_cpp<cpp11::decay_t<SEXP>>(p), cpp11::as_cpp<cpp11::decay_t<SEXP>>(q)));
  END_CPP11
}
// simplify.cpp
SEXP poly_simplify(SEXP poly, int cost, int stop, double cost_par, double stop_par);
extern "C" SEXP _boundaries_poly_simplify(SEXP poly, SEXP cost, SEXP stop, SEXP cost_par, SEXP stop_par) {
  BEGIN_CPP11
    return cpp11::as_sexp(poly_simplify(cpp11::as_cpp<cpp11::decay_t<SEXP>>(poly), cpp11::as_cpp<cpp11::decay_t<int>>(cost), cpp11::as_cpp<cpp11::decay_t<int>>(stop), cpp11::as_cpp<cpp11::decay_t<double>>(cost_par), cpp11::as_cpp<cpp11::decay_t<double>>(stop_par)));
  END_CPP11
}
// skeleton.cpp
SEXP polygon_skeleton_offset(SEXP polygons, SEXP offset);
extern "C" SEXP _boundaries_polygon_skeleton_offset(SEXP polygons, SEXP offset) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_skeleton_offset(cpp11::as_cpp<cpp11::decay_t<SEXP>>(polygons), cpp11::as_cpp<cpp11::decay_t<SEXP>>(offset)));
  END_CPP11
}
// skeleton.cpp
SEXP polygon_skeleton_polylineset(SEXP polygons, bool keep_boundary, bool only_inner);
extern "C" SEXP _boundaries_polygon_skeleton_polylineset(SEXP polygons, SEXP keep_boundary, SEXP only_inner) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_skeleton_polylineset(cpp11::as_cpp<cpp11::decay_t<SEXP>>(polygons), cpp11::as_cpp<cpp11::decay_t<bool>>(keep_boundary), cpp11::as_cpp<cpp11::decay_t<bool>>(only_inner)));
  END_CPP11
}
// skeleton.cpp
SEXP polygon_skeleton_limit(SEXP polygons);
extern "C" SEXP _boundaries_polygon_skeleton_limit(SEXP polygons) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_skeleton_limit(cpp11::as_cpp<cpp11::decay_t<SEXP>>(polygons)));
  END_CPP11
}
// skeleton.cpp
SEXP polygon_skeleton_limit_location(SEXP polygons);
extern "C" SEXP _boundaries_polygon_skeleton_limit_location(SEXP polygons) {
  BEGIN_CPP11
    return cpp11::as_sexp(polygon_skeleton_limit_location(cpp11::as_cpp<cpp11::decay_t<SEXP>>(polygons)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_boundaries_poly_simplify",                   (DL_FUNC) &_boundaries_poly_simplify,                   5},
    {"_boundaries_polygon_minkowski_offset",        (DL_FUNC) &_boundaries_polygon_minkowski_offset,        4},
    {"_boundaries_polygon_minkowski_sum",           (DL_FUNC) &_boundaries_polygon_minkowski_sum,           2},
    {"_boundaries_polygon_skeleton_limit",          (DL_FUNC) &_boundaries_polygon_skeleton_limit,          1},
    {"_boundaries_polygon_skeleton_limit_location", (DL_FUNC) &_boundaries_polygon_skeleton_limit_location, 1},
    {"_boundaries_polygon_skeleton_offset",         (DL_FUNC) &_boundaries_polygon_skeleton_offset,         2},
    {"_boundaries_polygon_skeleton_polylineset",    (DL_FUNC) &_boundaries_polygon_skeleton_polylineset,    3},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_boundaries(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
